import chalk from 'chalk';
import fs from 'fs';
import os from 'os';
import path from 'path';
import { confirm } from '@inquirer/prompts';
import { Command, OptionValues } from 'commander';
import { Client } from '@nosana/sdk';
import { getSDK } from '../../services/sdk.js';
import { config } from '../../generic/config.js';
import { NosanaNode } from '../../services/NosanaNode.js';

const checkWalletCompromiseAPI = async (wallet: string): Promise<boolean> => {
  const sdk: Client = getSDK();

  const signature = (await sdk.solana.signMessage(
    config.signMessage,
  )) as Uint8Array;
  const base64Signature = Buffer.from(signature).toString('base64');

  try {
    const response = await fetch(
      `${config.backendUrl}/nodes/${wallet}/vulnerability-check`,
      {
        method: 'POST',
        headers: {
          Authorization: `${wallet}:${base64Signature}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          wallet: wallet,
        }),
      },
    );

    if (response.status === 200) {
      return false;
    } else if (response.status === 401) {
      return true;
    } else {
      console.error(chalk.red(`Failed to access node vulnerability`));
      process.exit(1);
    }
  } catch (error: any) {
    console.error(
      chalk.red(`Failed to access node vulnerability ${error.message}`),
    );
    process.exit(1);
  }
};

const handleCompromisedWallet = async (opts: OptionValues): Promise<void> => {
  let walletPath = opts.wallet;
  if (walletPath.startsWith('~')) {
    walletPath = walletPath.replace('~', os.homedir());
  }

  const sdk: Client = getSDK();
  const wallet = sdk.solana.wallet.publicKey.toString();

  const accept = await confirm({
    message: chalk.yellow(
      `Your wallet ${chalk.yellow(
        wallet,
      )} has been compromised and must be changed. Do you accept?`,
    ),
  });

  if (!accept) {
    console.log(
      chalk.red('To continue, you must accept to change the wallet.'),
    );
    process.exit(1);
  }

  // Rename the wallet file to mark it as compromised
  try {
    if (!fs.existsSync(walletPath)) {
      console.error(
        chalk.red(`Wallet file not found at ${chalk.red(walletPath)}`),
      );
      process.exit(1);
    }

    const compromisedPath = path.join(
      path.dirname(walletPath),
      `${path.basename(walletPath)}.compromised`,
    );

    fs.renameSync(walletPath, compromisedPath);

    const node = new NosanaNode(
      sdk,
      opts.provider,
      opts.podman,
      opts.config,
      opts.gpu,
    );

    await node.joinTestGrid();

    console.log(
      chalk.green(
        'Wallet has been moved, Please reach out in Discord for more information',
      ),
    );
  } catch (error: any) {
    console.error(
      chalk.red(`Failed to access and update wallet file: ${error.message}`),
    );
    process.exit(1);
  }
};

export const handleWalletVulnerability = async (
  actionCommand: Command,
): Promise<void> => {
  const sdk: Client = getSDK();
  const wallet = sdk.solana.wallet.publicKey.toString();

  const opts = actionCommand.optsWithGlobals();

  const isCompromised = await checkWalletCompromiseAPI(wallet);

  const fullCommand = actionCommand.parent
    ? `${actionCommand.parent.name()} ${actionCommand.name()}`
    : actionCommand.name();

  if (isCompromised) {
    if (fullCommand === 'node start') {
      await handleCompromisedWallet(opts);
    } else {
      console.log(
        chalk.yellow(
          `Your wallet ${chalk.yellow(wallet)} has been compromised`,
        ),
      );
      process.exit(1);
    }
  }
};
